package com.liu.thread.knowledge;


public class Knowledge {

	/**
	 *
	 *1. 并发主要用于解决单处理器上程序的性能：因为程序中存在阻塞。 如果程序中不存在阻塞，那么并发在单处理器上使用就没有任何意义。<br/>
	 *2. 编写多线程程序最基本的困难在于协调不同线程驱动的任务之间对这些资源（内存、I/O等）的使用，以使得这些资源不会同时被多个任务访问。<br/>
	 *<br/>
	 *=======<br/>
	 *<br/>
	 *3. 描述任务的方式： 有Runnable接口来提供。实现Runnable接口并编写run()方法，使得该任务可以执行自定义的命令。<br/>
	 *4. 将Runnable对象转变为工作任务的传统方式是把它提交给一个Thread构造器。<br/>
	 *5. java.util.concurrent包中的执行器（Executor）可以对 对象进行管理，从而简化并发编程。<br/>
	 *6. 加入一个线程： 一个线程可以在其他线程上调用join()方法，其效果是等待一段时间直到第二个线程（调用join()方法的线程）
	 *结束才继续执行。如果在线程A执行时调用了线程B的join()方法，则A线程将被挂起，直到目标线程B运行结束才恢复。<br/>
	 *
	 *
	 *
	 *
	 *
	 *
	 *
	 *
	 *
	 *
	 *
	 *
	 *
	 *
	 */
	public void test() {
		
	}
	
}
